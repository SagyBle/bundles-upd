<link rel="stylesheet" href="{{ 'create-bundle-styles.css' | asset_url }}">

<p>Hello world!!!</p>

<button id="create-bundle-button" onclick="createBundle()" class="btn-primary">
  Create Bundle
</button>
<button id="checkout-button3" onclick="testProxy()" class="btn-primary">
  Test!
</button>

<!-- Toggle Button for Additional Product -->
<button id="toggle-additional-product" class="btn-secondary">
  Include Additional Product
</button>

<!-- Toggle Button for Mutual Wedding Band -->
<button id="toggle-wedding-band" class="btn-secondary">
  Include Mutual Wedding Band
</button>

{% if product.metafields.custom.relatedstones %}
  {% assign rstones = product.metafields.custom.relatedstones.value %}

  <div class="stone-container">
    {% for p in rstones %}
      <div class="stone-card" data-id="{{ p.id }}" data-carat="{{ p.carat }}" data-color="{{ p.color }}" data-cut="{{ p.cut }}" data-clarity="{{ p.clarity }}">
        <img src="{{ p.featured_image | image_url: width: 200 }}" 
              alt="{{ p.title }}" 
              height="auto"
              width="auto">

        <h3>{{ p.title }}</h3>
        <p>{{ p.price | money }}</p>
      </div>
    {% endfor %}
  </div>
{% else %}
  <p>No related stones found.</p>
{% endif %}

<script>
  window.currentProductId = "{{ product.id }}";
  let chosenStone = null;
  
  // Define product IDs (converted to Shopify GID format)
  const additionalProductId = "10100360446239"; // Extra product
  const weddingBandVariantId = "50741704261919"; // Mutual Wedding Band

  // Initial state: Not included by default
  window.includeAdditionalProduct = false;
  window.includeWeddingBand = false;

  document.addEventListener("DOMContentLoaded", function () {
    // Select all stone cards
    const stoneCards = document.querySelectorAll(".stone-card");

    stoneCards.forEach((card) => {
      card.addEventListener("click", function () {
        chosenStone = {
          productId: this.getAttribute("data-id"),
          title: this.querySelector("h3").innerText
        };

        console.log("‚úÖ Stone selected:", chosenStone);
      });
    });

    // Handle additional product toggle button
    const toggleAdditionalButton = document.getElementById("toggle-additional-product");
    toggleAdditionalButton.addEventListener("click", function () {
      window.includeAdditionalProduct = !window.includeAdditionalProduct;
      toggleAdditionalButton.innerText = window.includeAdditionalProduct 
        ? "‚úÖ Additional Product Included" 
        : "Include Additional Product";
      console.log("üîÑ Additional Product:", window.includeAdditionalProduct);
    });

    // Handle wedding band toggle button
    const toggleWeddingBandButton = document.getElementById("toggle-wedding-band");
    toggleWeddingBandButton.addEventListener("click", function () {
      window.includeWeddingBand = !window.includeWeddingBand;
      toggleWeddingBandButton.innerText = window.includeWeddingBand 
        ? "‚úÖ Wedding Band Included" 
        : "Include Mutual Wedding Band";
      console.log("üîÑ Wedding Band:", window.includeWeddingBand);
    });
  });

  const createBundle = async (secondProductId) => {
    const startTime = Date.now();  
    console.log("üöÄ Sending create bundle request...");

    if (chosenStone && chosenStone.productId) {
      secondProductId = chosenStone.productId;
    } else {
      console.log("‚ùå You have to choose a stone in order to create a bundle.");
      alert("You have to choose a stone in order to create a bundle.");
      return;
    }

    const productName = `üíç {{ product.title | escape }}`;
    const stoneTitle = `üíé ${chosenStone.title}`;
    const bundleTitle = `${productName} ${stoneTitle}`;
    
    // Construct productsIds array with current product and selected stone
    let productsIds = [window.currentProductId, secondProductId];

    // Add additional product if toggled on
    if (window.includeAdditionalProduct) {
      productsIds.push(additionalProductId);
    }

    console.log("Creating bundle with:", productsIds);

    try {
      const responseBundle = await fetch("https://sagy-test-academy.myshopify.com/apps/create-bundle-button/bundlespublic", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({
          productsIds,
          bundleTitle
        }),
      });

      if (!responseBundle.ok) {
        throw new Error(`Bundle request failed: ${responseBundle.status}`);
      }

      const dataBundle = await responseBundle.json();
      console.log("‚úÖ sagy200 Bundle response:", dataBundle);

      const variantId = dataBundle?.data?.variantId;
      const variantIdNumeric = dataBundle?.data?.variantIdNumeric;

      if (!variantIdNumeric) {
        throw new Error("‚ùå Error: Variant ID is missing or invalid.");
      }

      console.log("‚úÖ Extracted variantId:", variantId);
      console.log("‚úÖ Extracted variantIdNumeric:", variantIdNumeric);

      setTimeout(() => {
        addBundleToCart(variantIdNumeric, startTime);
      }, 1000);

    } catch (error) {
      console.error("‚ùå Fetch Error:", error);
      alert(`‚ùå Error: ${error.message}`);
    }
  };

  const addBundleToCart = async (variantId, startTime) => {
    console.log("üöÄ Adding bundle to cart...", variantId);

    try {
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to add product to cart: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ Product added to cart:", data);
      // alert("‚úÖ Bundle added to cart!");

      // Add Wedding Band separately if toggled on
      if (window.includeWeddingBand) {
        addWeddingBandToCart();
      }
    } catch (error) {
      console.error("‚ùå Error adding product to cart:", error);
      alert("‚ùå Error adding bundle to cart. Please try again.");
    }
  };

  const addWeddingBandToCart = async () => {
    console.log("üöÄ Adding Wedding Band separately to cart...", weddingBandVariantId);

    try {
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: weddingBandVariantId,
          quantity: 1,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to add Wedding Band to cart: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ Wedding Band added to cart:", data);
      alert("‚úÖ Wedding Band added to cart!");
    } catch (error) {
      console.error("‚ùå Error adding Wedding Band to cart:", error);
      alert("‚ùå Error adding Wedding Band. Please try again.");
    }
  };
</script>

{% schema %}
{
  "name": "Create Bundle Button",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "Product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
  ]
}
{% endschema %}
