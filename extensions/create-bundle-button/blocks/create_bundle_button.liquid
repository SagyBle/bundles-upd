<link rel="stylesheet" href="{{ 'create-bundle-styles.css' | asset_url }}">


<p>hello world!</p>

<button id="create-bundle-button" onclick="createBundle()" class="btn-primary">
  Create Bundle
</button>
<button id="checkout-button3" onclick="testProxy()" class="btn-primary">
  Test!
</button>

{% if product.metafields.custom.relatedstones %}
  {% assign rstones = product.metafields.custom.relatedstones.value %}

  <div class="stone-container">
    {% for p in rstones %}
      <div class="stone-card" data-id="{{ p.id }}" data-carat="{{ p.carat }}" data-color="{{ p.color }}" data-cut="{{ p.cut }}" data-clarity="{{ p.clarity }}">
        <!-- Product Image -->
        <img src="{{ p.featured_image | image_url: width: 200 }}" 
              alt="{{ p.title }}" 
              height="auto"
              width="auto"
              >

        <h3>
          {{ p.title }}
        </h3>

        <!-- Product Price -->
        <p>
          {{ p.price | money }}
        </p>
      </div>
    {% endfor %}
  </div>
{% else %}
  <p>No related stones found.</p>
{% endif %}

<script>
  window.currentProductId = "{{ product.id }}";
  let chosenStone = null;

  document.addEventListener("DOMContentLoaded", function () {
  // Select all stone cards
  const stoneCards = document.querySelectorAll(".stone-card");

  stoneCards.forEach((card) => {
    card.addEventListener("click", function () {
      chosenStone = {
        productId: this.getAttribute("data-id"),
        title: this.querySelector("h3").innerText
      };

      console.log("‚úÖ Stone selected:", chosenStone);
    });
  });
});

  const createBundle = async (secondProductId) => {
    const startTime = Date.now();  
    console.log("üöÄ Sending create bundle request...");

    if (chosenStone && chosenStone.productId) {
      secondProductId = chosenStone.productId;
    } else {
      console.log("‚ùå You have to choose a stone in order to create a bundle.");
      alert("You have to choose a stone in order to create a bundle.");
      return;
    }

    console.log("Creating bundle with:", { firstProductId: window.currentProductId, secondProductId });

    const productName = `üíç {{ product.title | escape }}`;
    const stoneTitle = `üíé ${chosenStone.title}`;
    const bundleTitle = `${productName} ${stoneTitle}`;

    try {
      const responseBundle = await fetch("https://sagy-test-academy.myshopify.com/apps/create-bundle-button/bundlespublic", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({
          firstProductId: window.currentProductId,
          secondProductId,
          bundleTitle
        }),
      });

      if (!responseBundle.ok) {
        throw new Error(`Bundle request failed: ${responseBundle.status}`);
      }

      const dataBundle = await responseBundle.json();
      console.log("‚úÖ sagy200 Bundle response:", dataBundle);

      // Extract variantIdNumeric safely
      const variantId = dataBundle?.data?.variantId;
      const variantIdNumeric = dataBundle?.data?.variantIdNumeric;

      if (!variantIdNumeric) {
        throw new Error("‚ùå Error: Variant ID is missing or invalid.");
      }

      console.log("‚úÖ Extracted variantId:", variantId);
      console.log("‚úÖ Extracted variantIdNumeric:", variantIdNumeric);

      setTimeout(() => {
        addBundleToCart(variantIdNumeric, startTime);
      }, 1200);

    } catch (error) {
      console.error("‚ùå Fetch Error:", error);
      alert(`‚ùå Error: ${error.message}`);
    }
  };

  // Function to add bundle to cart
  const addBundleToCart = async (variantId, startTime,maxDuration = 3000, retryDelay = 200) => {
    console.log("üöÄ Waiting before adding bundle to cart...", variantId);
    
    // Wait initially before starting retries

    console.log("üöÄ Adding bundle to cart now...", variantId);
    const startTimeCart = Date.now();
    const endTimeCart = startTimeCart + maxDuration;

    while (Date.now() < endTimeCart) {
      try {
        console.log("üöÄ Trying to add bundle to cart");

        const response = await fetch("/cart/add.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1,
          }),
        });

        if (!response.ok) {
          throw new Error(`Failed to add product to cart: ${response.status}`);
        }

        const data = await response.json();

        if (data && Object.keys(data).length > 0) {
          const elapsedTime = (Date.now() - startTime) / 1000;
          console.log("‚úÖ Product added to cart:", data, "Total time:", elapsedTime);
          alert("‚úÖ Bundle added to cart!");
          return;
        } else {
          console.warn("‚ö†Ô∏è Empty response received. Retrying...");
        }
      } catch (error) {
        console.error("‚ùå Error adding product to cart:", error);
      }

      await new Promise((resolve) => setTimeout(resolve, retryDelay));
    }

    console.error("‚è≥ Max retries reached. Bundle not added.");
    alert("‚ùå Error adding bundle to cart. Please try again.");
  };

  const testProxy = async () => {
    console.log("üöÄ Sending request...", window.currentProductId);

    const requestBody = {
      message: "Hello from Shopify Extension!",
      user: {
        id: "12345",
        name: "Sagy Blecher",
      }
    };

    try {
      const response = await fetch("https://sagy-test-academy.myshopify.com/apps/create-bundle-button/test", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(`Request failed: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ Response:", data);
      alert(`‚úÖ Success: ${data.message}`);
    } catch (error) {
      console.error("‚ùå Fetch Error:", error);
      alert(`‚ùå Error: ${error.message}`);
    }
  };
</script>

{% schema %}
{
  "name": "Create Bundle Button",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
  ]
}
{% endschema %}
