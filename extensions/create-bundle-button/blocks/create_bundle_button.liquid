<p>hello world!</p>

<button id="checkout-button3" onclick="createBundle()" style="
  padding: 10px 20px;
  background-color: #008060;
  color: white;
  border: none;
  cursor: pointer;
  margin-top: 10px;
  font-size: 16px;
">
  Create Bundle
</button>
<button id="checkout-button3" onclick="testProxy()" style="
  padding: 10px 20px;
  background-color: #008060;
  color: white;
  border: none;
  cursor: pointer;
  margin-top: 10px;
  font-size: 16px;
">
  Test!
</button>

{% if product.metafields.custom.relatedstones %}
  {% assign rstones = product.metafields.custom.relatedstones.value %}

  <div style="display: flex; flex-wrap: wrap; gap: 20px;">
    {% for p in rstones %}
      <div class="stone-card" data-id="{{ p.id }}" data-carat="{{ p.carat }}" data-color="{{ p.color }}" data-cut="{{ p.cut }}" data-clarity="{{ p.clarity }}" style="
        width: 200px;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        padding: 10px;
        text-align: center;
        background-color: #fff;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
      "
        onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='4px 4px 15px rgba(0, 0, 0, 0.2)'; this.style.borderColor='#008060';"
        onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='2px 2px 10px rgba(0, 0, 0, 0.1)'; this.style.borderColor='#ddd';"
      >
        <!-- Product Image -->
        <img src="{{ p.featured_image | image_url: width: 200 }}" 
              alt="{{ p.title }}" 
              style="width: 100%; border-radius: 10px;">

        <!-- Product Title -->
        <h3 style="font-size: 14px; margin: 10px 0; color: #333;">
          {{ p.title }}
        </h3>

        <!-- Product Price -->
        <p style="font-size: 14px; color: #666;">
          {{ p.price | money }}
        </p>
      </div>
    {% endfor %}
  </div>
{% else %}
  <p>No related stones found.</p>
{% endif %}

<script>
  window.currentProductId = "{{ product.id }}";
  let chosenStone = null;

  document.addEventListener("DOMContentLoaded", function () {
  // Select all stone cards
  const stoneCards = document.querySelectorAll(".stone-card");

  stoneCards.forEach((card) => {
    card.addEventListener("click", function () {
      chosenStone = {
        productId: this.getAttribute("data-id"),
        title: this.querySelector("h3").innerText
      };

      console.log("‚úÖ Stone selected:", chosenStone);
    });
  });
});

  const createBundle = async (secondProductId) => {
    const startTime = Date.now();  
    console.log("üöÄ Sending create bundle request...");

    if (chosenStone && chosenStone.productId) {
      secondProductId = chosenStone.productId;
    } else {
      console.log("‚ùå You have to choose a stone in order to create a bundle.");
      alert("You have to choose a stone in order to create a bundle.");
      return;
    }

    console.log("Creating bundle with:", { firstProductId: window.currentProductId, secondProductId });

    const productName = `üíç {{ product.title | escape }}`;
    const stoneTitle = `üíé ${chosenStone.title}`;
    const bundleTitle = `${productName} ${stoneTitle}`;

    try {
      const responseBundle = await fetch("https://sagy-test-academy.myshopify.com/apps/create-bundle-button/bundlespublic", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({
          firstProductId: window.currentProductId,
          secondProductId,
          bundleTitle
        }),
      });

      if (!responseBundle.ok) {
        throw new Error(`Bundle request failed: ${responseBundle.status}`);
      }

      const dataBundle = await responseBundle.json();
      console.log("‚úÖ sagy200 Bundle response:", dataBundle);

      // Extract variantIdNumeric safely
      const variantId = dataBundle?.data?.variantId;
      const variantIdNumeric = dataBundle?.data?.variantIdNumeric;

      if (!variantIdNumeric) {
        throw new Error("‚ùå Error: Variant ID is missing or invalid.");
      }

      console.log("‚úÖ Extracted variantId:", variantId);
      console.log("‚úÖ Extracted variantIdNumeric:", variantIdNumeric);

      setTimeout(() => {
        addBundleToCart(variantIdNumeric, startTime);
      }, 500);

    } catch (error) {
      console.error("‚ùå Fetch Error:", error);
      alert(`‚ùå Error: ${error.message}`);
    }
  };

  // Function to add bundle to cart
  const addBundleToCart = async (variantId, startTime) => {
    console.log("üöÄ Adding bundle to cart...", variantId);

    try {
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to add product to cart: ${response.status}`);
      }

      const data = await response.json();

      const endTime = Date.now();
      const elapsedTime = (endTime - startTime) / 1000;

      console.log("‚úÖ Product added to cart:", data, "Total time:", elapsedTime);
      alert(`‚úÖ Bundle added to cart!`);
    } catch (error) {
      console.error("‚ùå Error adding product to cart:", error);
      alert(`‚ùå Error adding bundle to cart: ${error.message}`);
    }
  };

  const testProxy = async () => {
    console.log("üöÄ Sending request...", window.currentProductId);

    const requestBody = {
      message: "Hello from Shopify Extension!",
      user: {
        id: "12345",
        name: "Sagy Blecher",
      }
    };

    try {
      const response = await fetch("https://sagy-test-academy.myshopify.com/apps/create-bundle-button/test", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(`Request failed: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ Response:", data);
      alert(`‚úÖ Success: ${data.message}`);
    } catch (error) {
      console.error("‚ùå Fetch Error:", error);
      alert(`‚ùå Error: ${error.message}`);
    }
  };
</script>

{% schema %}
{
  "name": "Create Bundle Button",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
  ]
}
{% endschema %}
